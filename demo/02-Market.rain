

---------------------------------------------------------------------------------------------------
-- Client order for a particular item.
fact Order   [desc:  Text, limit: Nat,  budget: Nat]

-- Market listing of an item for sale.
fact Item    [lot:   Nat,  desc:  Text, ask: Nat]

-- Market accepts a lower offer for an item.
fact Accept  [lot:  Nat,  price:  Nat]

-- Market tracking of an offer below the asking price.
fact Offer   [lot:  Nat,  price:  Nat]

-- A bid placed on an item by a broker.
fact Bid     [lot:   Nat, offer:  Nat]

-- Local tracking of remaining budget by a broker.
fact Budget  [total: Nat, remain: Nat]

-- Local tracking of reserved portion of a budget by a broker.
fact Reserve [lot:   Nat, bid:    Nat]


---------------------------------------------------------------------------------------------------
-- Brendan reserves a portion of Alice's budget,
-- and sends a bid to the market for one of the items Alice has ordered.
--
-- By placing the order Alice delegates her authority to Brendan for
-- the purpose of bidding on orders.
--
rule  reserve
await Order     [desc  = ?d, limit = ?l]
      consume none                        gain  {!Alice}
 and  Item      [lot   = ?o, desc = d, ask = ?a]
      select first a  consume none        check {!Mark}
 and  Budget    [total = ?t, remain = ?m] gain  {!Brendan}
 and  Reserve   [lot   = o,  bid    = ?b]
      where #bool'and (#nat'le b l) (#bool'and (#nat'le b a) (#nat'le b m))
      check {!Brendan}
 to
     #factoids'union
      (say Budget [total = t, remain = #nat'sub m a]
       by {!Brendan} use {'reserve})
      (say Bid    [lot   = o, price = b]
       by {!Brendan, !Alice} obs {!Mark} use {'bid})


-- Mark receives a bid from Brendan,
--  checks that there is a matching item for sale.
--  If the bid price is less than the asking price it is converted
--  to a resting offer on the book.
rule  bid
await Bid       [lot = ?o, price = ?b]
      gain {!Brendan}
  and Item      [lot = o,  ask   = ?a]
      where  #nat'lt b a
      consume none  gain {!Mark}
 to
      say Offer [lot = o, price = b]
      by {!Brendan, !Mark} use {'accept}


-- Mark accepts a resting offer,
--  removing the item from the list and creating an invoice.
rule  accept
await Accept    [lot = ?o, price = ?p]  gain {!Mark}
  and Offer     [lot = o,  price = p]   gain {!Brendan, !Mark}
  and Item      [lot = o,  desc  = ?d]
      consume 1 check {!Mark}
 to
      say Invoice [seller = !Mark, buyer = !Brendan, desc = d, amount = p]
      by  {!Mark, !Brendan}


---------------------------------------------------------------------------------------------------
scenario test do
        -- Alice tells Brendan she wants Rock Lobsters,
        --  for less than 28 each, with a total budget of 100.
 add    say Order       [desc = "Rock Lobster", limit = 28, total = 100]
        by  {!Alice}    obs {!Brendan}  use {'reserve}

        -- Brendan initializes a local budget fact to track outstanding bids
        -- for Alice. The budget only needs to be observable to Brendan.
 add    say Budget      [desc = "Rock Lobster", total = 100, remain = 100]
        by  {!Brendan}  use {'reserve}

        -- Mark announces items for sale.
 add    say Item        [lot = 1001, desc = "Rock Lobster", ask = 24]
        by {!Mark} obs {!Brendan, !Brett} use {'bid, 'accept}

 add    say Item        [lot = 1002, desc = "Rock Lobster", ask = 26]
        by {!Mark} obs {!Brendan, !Brett} use {'bid, 'accept}

 add    say Item        [lot = 1003, desc = "Bikini Whale", ask = 645]
        by {!Mark} obs {!Brendan, !Brett} use {'bid, 'accept}
 dump

        -- Brendan enters a bid of 22 for the first lobster,
        -- checking the current budget along the way.
 add    say Reserve     [lot = 1001, bid = 22]
        by {!Brendan} use {'reserve}

        -- Brendan fire's his local bid rule.
 fire   by {!Brendan} rules {'reserve}

        -- Mark cycles the bid into a resting offer.
 fire   by {!Mark} rules {'bid}

        -- Mark accepts Brendan's lower offer.
 add    say Accept      [lot = 1001, price = 22]
        by {!Mark} use {'accept}
 dump

        -- Rock lobster is sold.
 fire   by {!Mark} rules {'accept}

 dump



